package com.example.chatapplication2.activitytest

import androidx.activity.enableEdgeToEdge
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.example.chatapplication2.R

import android.os.Bundle
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.Observer
import com.example.chatapplication2.databinding.ActivityGroupUserReadingProcessBinding
import com.example.chatapplication2.model.GroupUserReadingProcess
import com.example.chatapplication2.viewmodel.GroupUserReadingProcessViewModel

class GroupUserReadingProcessActivity : AppCompatActivity() {

    private val groupUserReadingProcessViewModel: GroupUserReadingProcessViewModel by viewModels()
    private lateinit var binding: ActivityGroupUserReadingProcessBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityGroupUserReadingProcessBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Observe the list of group user reading processes
        groupUserReadingProcessViewModel.groupUserReadingProcessesLiveData.observe(this, Observer { processes ->
            // Update the UI with the list of reading processes (e.g., in a RecyclerView)
            // Example:
            // processAdapter.submitList(processes)
        })

        // Observe error messages
        groupUserReadingProcessViewModel.errorLiveData.observe(this, Observer { errorMessage ->
            if (!errorMessage.isNullOrEmpty()) {
                Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show()
            }
        })

        // Add GroupUserReadingProcess button click listener
        binding.btnAddProcess.setOnClickListener {
            val newProcess = GroupUserReadingProcess(
                gurpid = "", // ID will be generated by Firestore
                readingProcess = binding.etReadingProcess.text.toString(),
                timeStamp = binding.etTimeStamp.text.toString()
            )
            groupUserReadingProcessViewModel.addGroupUserReadingProcess(newProcess)
        }

        // Get GroupUserReadingProcesses button click listener
        binding.btnGetProcesses.setOnClickListener {
            groupUserReadingProcessViewModel.getGroupUserReadingProcesses()
        }

        // Update GroupUserReadingProcess button click listener
        binding.btnUpdateProcess.setOnClickListener {
            val processId = binding.etProcessId.text.toString()
            val updatedProcess = GroupUserReadingProcess(
                gurpid = processId,
                readingProcess = binding.etReadingProcess.text.toString(),
                timeStamp = binding.etTimeStamp.text.toString()
            )
            groupUserReadingProcessViewModel.updateGroupUserReadingProcess(processId, updatedProcess)
        }

        // Delete GroupUserReadingProcess button click listener
        binding.btnDeleteProcess.setOnClickListener {
            val processId = binding.etProcessId.text.toString()
            groupUserReadingProcessViewModel.deleteGroupUserReadingProcess(processId)
        }
    }
}
